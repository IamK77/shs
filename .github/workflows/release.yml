name: release

on:
    push:
        tags:
            - 'v*'

env:
    EXECUTABLE: "shs"         # set ur executable file name
    SET_WORKSPACE: "./rust"   # default value is "." , because "." means root directory, it means nothing to do with the workspace
    IS_TARGZ: "true"          # set to "true" if you want to create tar.gz file, otherwise set to "false"
    MY_PAT: ${{ secrets.MY_PAT }} # replace with your own secret name

jobs:
    build:
      runs-on: ${{ matrix.config.os }}
      strategy:
        matrix:
          config:
            - {os: macos-12, target: aarch64-apple-darwin, name: macos}
            - {os: ubuntu-latest, target: x86_64-unknown-linux-gnu, name: linux}
            - {os: windows-latest, target: x86_64-pc-windows-gnu, name: windows}
      steps:
        - uses: actions/checkout@v2
        - name: Install Rust
          uses: actions-rs/toolchain@v1
          with:
            toolchain: stable
            target: ${{ matrix.config.target }}
            override: true
        - name: Build
          run: |
            cd ${{ env.SET_WORKSPACE }}
            cargo build --release
        - name: Run tests
          run: |
            cd ${{ env.SET_WORKSPACE }}
            cargo test
        - name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: ${{ env.EXECUTABLE }}-${{ matrix.config.name }}
            path: ./rust/target/release/${{ env.EXECUTABLE }}

    release:
        needs: [build]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                os: [linux, windows, macos]

        steps:
          - name: Download artifact
            uses: actions/download-artifact@v2
            env:
              GITHUB_TOKEN: ${{ env.MY_PAT }}
            with:
              name: ${{ env.EXECUTABLE }}-${{ matrix.os }}
              path: ./${{ matrix.os }}/${{ env.EXECUTABLE }}${{ matrix.os == 'windows' && '.exe' || '' }}

          - name: Create zip
            run: |
                  sudo apt-get install zip
                  zip ${{ env.EXECUTABLE }}_linux.zip ./linux/${{ env.EXECUTABLE }}
                  zip ${{ env.EXECUTABLE }}_windows.zip ./windows/${{ env.EXECUTABLE }}.exe
                  zip ${{ env.EXECUTABLE }}_macos.zip ./macos/${{ env.EXECUTABLE }}
                  if [ "${{ env.IS_TARGZ }}" = "true" ]; then
                    tar -czvf ${{ env.EXECUTABLE }}_linux.tar.gz ./linux/${{ env.EXECUTABLE }}
                    tar -czvf ${{ env.EXECUTABLE }}_macos.tar.gz ./macos/${{ env.EXECUTABLE }}
                  fi

          - name: Create Release
            id: create_release
            uses: softprops/action-gh-release@v2
            if: startsWith(github.ref, 'refs/tags/')
            env:
                GITHUB_TOKEN: ${{ env.MY_PAT }}
            with:
                files: |
                  ${{ env.EXECUTABLE }}_linux.zip
                  ${{ env.EXECUTABLE }}_windows.zip
                  ${{ env.EXECUTABLE }}_macos.zip
            
          - name: Release tar.gz files
            uses: softprops/action-gh-release@v2
            if: startsWith(github.ref, 'refs/tags/') && env.IS_TARGZ
            env:
              GITHUB_TOKEN: ${{ env.MY_PAT }}
            with:
              files: |
                ${{ env.EXECUTABLE }}_linux.tar.gz
                ${{ env.EXECUTABLE }}_macos.tar.gz
            

# How to set up the secrets?
# 1. Go to your personal settings in GitHub
# 2. Go to Developer settings
# 3. Go to Personal access tokens
# 4. Click on Generate new token
# 5. Give it a name and select the scope (repo)
# 6. Click on Generate token
# 7. Copy the token and save it carefully, then go to your repository
# 8. Go to the repo settings
# 9. Go to Secrets
# 10. Click on New repository secret
# 11. Give it a name and paste the token
# 12. Click on Add secret
# 13. Now you can use the secret in your workflow
